"""
WAF detector module for detecting Web Application Firewalls
"""

import re

from utils.logger import get_logger


class WAFDetector:
    """
    WAF detector for identifying Web Application Firewalls
    """

    def __init__(self, http_client):
        """
        Initialize the WAF detector.

        Args:
            http_client (HTTPClient): HTTP client for making requests
        """
        self.logger = get_logger()
        self.http_client = http_client

        # Define WAF signatures
        self.waf_signatures = {
            'Cloudflare': [
                {'headers': {'server': 'cloudflare'}},
                {'headers': {'cf-ray': ''}},
                {'content': 'Cloudflare Ray ID:'},
                {'content': 'Cloudflare to restrict access'}
            ],
            'ModSecurity': [
                {'headers': {'server': 'mod_security'}},
                {'content': 'This error was generated by Mod_Security'},
                {'content': 'ModSecurity Action: Access denied'}
            ],
            'AWS WAF': [
                {'headers': {'x-amzn-waf-action': ''}},
                {'content': 'AWS WAF Managed Rule'},
                {'content': 'AWS WAF blocked this request'}
            ],
            'Akamai': [
                {'headers': {'server': 'AkamaiGHost'}},
                {'headers': {'x-akamai-transformed': ''}}
            ],
            'Imperva': [
                {'headers': {'x-iinfo': ''}},
                {'content': 'Powered by Imperva'}
            ],
            'F5 BIG-IP ASM': [
                {'headers': {'server': 'BigIP'}},
                {'content': 'The requested URL was rejected. Please consult with your administrator.'}
            ],
            'Sucuri': [
                {'headers': {'x-sucuri-id': ''}},
                {'content': 'Sucuri WebSite Firewall'}
            ],
            'Barracuda': [
                {'headers': {'server': 'Barracuda'}},
                {'content': 'You are being blocked by the Barracuda Web Application Firewall'}
            ],
            'Fortinet': [
                {'headers': {'server': 'FortiGate'}},
                {'content': 'FortiWeb Application Firewall'}
            ],
            'Wordfence': [
                {'content': 'Generated by Wordfence'},
                {'content': 'This response was generated by Wordfence'}
            ]
        }

        # Define WAF detection payloads
        self.detection_payloads = [
            "' OR 1=1 --",
            "<script>alert(1)</script>",
            "../../../etc/passwd",
            "() { :; }; /bin/bash -c 'cat /etc/passwd'",
            "/?param=<script>alert(1)</script>",
            "/?param=' OR '1'='1",
            "/?param=1 UNION SELECT 1,2,3,4,5--",
            "/?param=../../../../etc/passwd",
            "/?param=cat /etc/passwd",
            "/?param=<img src=x onerror=alert(1)>"
        ]

    def _check_waf_signature(self, response, waf_type, signatures):
        """
        Check if a response matches WAF signatures.

        Args:
            response (Response): HTTP response
            waf_type (str): WAF type
            signatures (list): List of signature dictionaries

        Returns:
            bool: True if a signature matches, False otherwise
        """
        for signature in signatures:
            # Check headers
            if 'headers' in signature:
                for header_name, header_value in signature['headers'].items():
                    if header_name.lower() in response.headers:
                        response_header = response.headers[header_name.lower()]
                        if header_value == '' or header_value.lower() in response_header.lower():
                            self.logger.debug(
                                f"WAF detected: {waf_type} (header signature)")
                            return True

            # Check content
            if 'content' in signature and signature['content'] in response.text:
                self.logger.debug(
                    f"WAF detected: {waf_type} (content signature)")
                return True

        return False

    def detect_waf(self, url):
        """
        Detect if a WAF is protecting the target.

        Args:
            url (str): Target URL

        Returns:
            tuple: (is_waf_detected, waf_type) if WAF is detected, (False, None) otherwise
        """
        self.logger.info(f"Detecting WAF for: {url}")

        # First, make a normal request to get a baseline response
        baseline_response = self.http_client.get(url)
        if not baseline_response:
            self.logger.error(
                f"Failed to get baseline response for WAF detection: {url}")
            return False, None

        # Check baseline response for WAF signatures
        for waf_type, signatures in self.waf_signatures.items():
            if self._check_waf_signature(baseline_response, waf_type, signatures):
                return True, waf_type

        # If no WAF is detected from the baseline, try with detection payloads
        for payload in self.detection_payloads:
            test_url = f"{url}?waf_test={payload}"
            response = self.http_client.get(test_url)

            if not response:
                continue

            # Check if the response status code indicates a WAF block
            if response.status_code in (403, 406, 429, 501, 502):
                self.logger.debug(
                    f"Potential WAF detected: Status code {response.status_code}")
                return True, "Unknown WAF"

            # Check for WAF signatures
            for waf_type, signatures in self.waf_signatures.items():
                if self._check_waf_signature(response, waf_type, signatures):
                    return True, waf_type

        self.logger.info("No WAF detected")
        return False, None
